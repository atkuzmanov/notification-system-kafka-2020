version: "2"
services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    expose:
      - "2181"
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
#      - "9093:9093"
    expose:
      - "9092"
      - "9093"
    environment:
#      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://127.0.0.1:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://127.0.0.1:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://notification-sending-system_kafka_1:9092
#      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:9092
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://notification-sending-system_kafka_1:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://kafka:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://host.docker.internal:19092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://host.docker.internal:9092
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: OUTSIDE:PLAINTEXT, PLAINTEXT:PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
#      KAFKA_LISTENERS: OUTSIDE://0.0.0.0:9092
#      KAFKA_LISTENERS: OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
#      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
#      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka
  notificationmysql:
    container_name: notificationmysql
    image: "mysql:8.0.21"
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=db_example
      - MYSQL_USER=springuser
      - MYSQL_PASSWORD=ThePassword
    ports:
      - "3306:3306"
    expose:
      - "3306"
    volumes:
      - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
  notification-sending-system:
    container_name: notification-sending-system
    build:
      context: .
      dockerfile: Dockerfile
    image: notification-sending-system:latest
    ports:
      - "8081:8080"
      - "5005:5005"
    expose:
      - "8081"
      - "5005"
    depends_on:
      - zookeeper
      - kafka
      - notificationmysql
#    command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -jar notification-service-0.0.1-SNAPSHOT.jar
#    command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -Djava.security.egd=file:/dev/./urandom -jar notification-service-0.0.1-SNAPSHOT.jar
    command: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005 -Djava.security.egd=file:/dev/./urandom -jar notification-service-0.0.1-SNAPSHOT.jar
